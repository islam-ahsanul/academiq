// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role          UserRole        @default(STUDENT)
	department    String?
	studentId     String?
	facultyInitials     String?
	facultyPosition     String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  posts         Post[]
  comments      Comment[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
  bookmarks     Bookmark[]
  reports       Report[]        // User reports

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Post {
  id            String          @id @default(uuid())
  title         String
  body          String
  courseCode     String
  materials     String[] 			// URLs for images, PDFs, etc.
  topics     String[]      // Array of topic tags
  hasMaterial   Boolean        @default(false)
  hasLink       Boolean        
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  comments      Comment[]
  votes         PostVote[]
  bookmarks     Bookmark[]
  reports       Report[]       

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id            String          @id @default(uuid())
  body          String
  postId        String
  post          Post            @relation(fields: [postId], references: [id])
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  parentId      String?
  parent        Comment?        @relation("CommentThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Comment[]       @relation("CommentThread")
  votes         CommentVote[]
  reports       Report[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model PostVote {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  postId        String
  post          Post            @relation(fields: [postId], references: [id])
  value         Int

  createdAt     DateTime        @default(now())

  @@unique([userId, postId])
}

model CommentVote {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  commentId     String
  comment       Comment         @relation(fields: [commentId], references: [id])
  value         Int

  createdAt     DateTime        @default(now())

  @@unique([userId, commentId])
}

model Bookmark {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  postId        String
  post          Post            @relation(fields: [postId], references: [id])

  createdAt     DateTime        @default(now())

  @@unique([userId, postId])
}

model Report {
  id            String          @id @default(uuid())
  postId        String?
  post          Post?           @relation(fields: [postId], references: [id])
  commentId     String?
  comment       Comment?        @relation(fields: [commentId], references: [id])
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  reason        String

  createdAt     DateTime        @default(now())
}

// Below for other purposes.
 
model Account {
  id                String      @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.Text
  access_token      String?     @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}