// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role          UserRole        @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  posts         Post[]
  comments      Comment[]
  postVotes     PostVote[]
  commentVotes  CommentVote[]
  bookmarks     Bookmark[]
  reports       Report[]        // User reports

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Post {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  body          String
  link          String?
  courseTag     String
  images        String[]      // Optional array of image URLs
  files         String[]      // Optional array of PDF URLs
  topicTags     String[]      // Array of topic tags
  hasMaterial   Boolean        @default(false)
  hasLink       Boolean        @default(false)
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  comments      Comment[]
  votes         PostVote[]
  bookmarks     Bookmark[]
  reports       Report[]       

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  body          String
  postId        String          @db.ObjectId
  post          Post            @relation(fields: [postId], references: [id])
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  parentId      String?         @db.ObjectId
  parent        Comment?        @relation("CommentThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Comment[]       @relation("CommentThread")
  votes         CommentVote[]
  reports       Report[]        // Reports related to the comment

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model PostVote {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  postId        String          @db.ObjectId
  post          Post            @relation(fields: [postId], references: [id])
  value         Int             // 1 for upvote, -1 for downvote

  createdAt     DateTime        @default(now())
}

model CommentVote {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  commentId     String          @db.ObjectId
  comment       Comment         @relation(fields: [commentId], references: [id])
  value         Int             // 1 for upvote, -1 for downvote

  createdAt     DateTime        @default(now())
}


model Bookmark {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  postId        String          @db.ObjectId
  post          Post            @relation(fields: [postId], references: [id])

  createdAt     DateTime        @default(now())
}

model Report {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  postId        String?         @db.ObjectId
  post          Post?           @relation(fields: [postId], references: [id])
  commentId     String?         @db.ObjectId
  comment       Comment?        @relation(fields: [commentId], references: [id])
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  reason        String

  createdAt     DateTime        @default(now())
}

// Below for other purposes.
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}